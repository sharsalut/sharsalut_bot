from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
import gspread
from telegram.ext import CallbackQueryHandler
import os
import json
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# === Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials_json = os.environ.get("GOOGLE_CREDENTIALS_JSON")
if not credentials_json:
    raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

creds_dict = json.loads(credentials_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("SharSalut_Bot").worksheet("Users")
orders_sheet = client.open("SharSalut_Bot").worksheet("Orders")
history_sheet = client.open("SharSalut_Bot").worksheet("History")

MANAGER_ID = 265458870
ADMINS = [265458870]  # üëà –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!


# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã –∏ –∑–∞–∫–∞–∑–∞
NAME, PHONE, GENDER = range(3)
ORDER_DATE, OCCASION, WHAT_TO_ORDER, COMMENT, ADDRESS = range(3, 8)

# –≠—Ç–∞–ø—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
ADMIN_MENU, CHOOSE_PHONE, ENTER_AMOUNT, ENTER_REASON, BROADCAST_CHOOSE, BROADCAST_TEXT = range(100, 106)
CASHBACK_PHONE, CASHBACK_AMOUNT = range(106, 108)

main_menu = ReplyKeyboardMarkup([
    ["üéà –ú–æ–∏ –±–∞–ª–ª—ã", "üì© –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"],
    ["üëØ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞", "‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"],
    ["üéÅ –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã", "üß© –ü—Ä–æ—Ñ–∏–ª—å"]
], resize_keyboard=True)

cancel_order_kb = ReplyKeyboardMarkup([["üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"]], resize_keyboard=True)

# === START / REGISTRATION ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É
    if context.args:
        context.user_data["ref_id"] = context.args[0]


    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME


async def bonuses_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéÅ *–ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã:*\n\n"
        "1Ô∏è‚É£ *–ö—ç—à–±—ç–∫ —Å –∑–∞–∫–∞–∑–∞* ‚Äî –¥–æ 10%:\n"
        "‚Ä¢ –û—Ç 3000‚ÇΩ ‚Äî 5%\n"
        "‚Ä¢ –û—Ç 5000‚ÇΩ ‚Äî 7%\n"
        "‚Ä¢ –û—Ç 10000‚ÇΩ ‚Äî 10%\n\n"
        "2Ô∏è‚É£ *–ó–∞ –æ—Ç–∑—ã–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö* ‚Äî 500 –±–∞–ª–ª–æ–≤\n"
        "3Ô∏è‚É£ *–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞* ‚Äî\n"
        "‚Ä¢ –¢—ã –ø–æ–ª—É—á–∏—à—å 500 –±–∞–ª–ª–æ–≤\n"
        "‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç 5 —à–∞—Ä–∏–∫–æ–≤ üéÅ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ–º—É —Å—Å—ã–ª–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ *¬´–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞¬ª*\n\n"
        "–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –¥–æ 15% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞.–ù–µ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å –∞–∫—Ü–∏—è–º–∏.\n"
        "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî 1 –≥–æ–¥.",
        parse_mode="Markdown"
    )


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—á–µ—Ä–µ–∑ 8...):")
    return PHONE

async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    gender_kb = ReplyKeyboardMarkup([["–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π"]], resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)
    return GENDER

async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    now = datetime.now().strftime("%d.%m.%Y %H:%M")

    user_id = str(update.effective_user.id)
    all_records = sheet.get_all_records()
    for row in all_records:
        if str(row["ID"]) == user_id:
            await update.message.reply_text("üëã –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_menu)
            return ConversationHandler.END

    try:
        sheet.append_row([
    user_id,
    context.user_data["name"],
    context.user_data["phone"],
    context.user_data["gender"],
    context.user_data.get("ref_id", ""),  # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
    300,
    now,
    ""
])


        history_sheet.append_row([
            user_id,
            now,
            "+",
            300,
            "–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        ])

        await context.bot.send_message(MANAGER_ID, f"üë§ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n–ò–º—è: {context.user_data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n–ü–æ–ª: {context.user_data['gender']}\nID: {update.effective_user.id}")

        await update.message.reply_text(
            "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª 300 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–¢–µ–ø–µ—Ä—å —Ç—ã —Å –Ω–∞–º–∏ ‚Äî –∞ –∑–Ω–∞—á–∏—Ç, –≤–ø–µ—Ä–µ–¥–∏ –º–Ω–æ–≥–æ —à–∞—Ä–æ–≤, —É–ª—ã–±–æ–∫ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤! üéà",
            reply_markup=main_menu
        )

        await update.message.reply_text(
            "üìå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã:\n"
            "‚Ä¢ –û—Ç 3000‚ÇΩ ‚Äî 5%\n"
            "‚Ä¢ –û—Ç 5000‚ÇΩ ‚Äî 7%\n"
            "‚Ä¢ –û—Ç 10000‚ÇΩ ‚Äî 10%\n"
            "‚Ä¢ –ó–∞ –æ—Ç–∑—ã–≤: 500 –±–∞–ª–ª–æ–≤\n"
            "‚Ä¢ –ó–∞ –¥—Ä—É–≥–∞: 500 –±–∞–ª–ª–æ–≤\n\n"
            "üìå –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:\n"
            "‚Ä¢ –î–æ 15% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞\n"
            "‚Ä¢ –ë–∞–ª–ª—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 1 –≥–æ–¥\n"
            "‚Ä¢ –ù–µ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å –∞–∫—Ü–∏—è–º–∏"
        )

        return ConversationHandler.END
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º.")
        return ConversationHandler.END


# === –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ===

async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω—É–∂–µ–Ω –∑–∞–∫–∞–∑?", reply_markup=cancel_order_kb)
    return ORDER_DATE

async def order_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["order_date"] = update.message.text
    await update.message.reply_text("–ß—Ç–æ –∑–∞ —á—É–¥–æ-–ø–æ–≤–æ–¥? –†–∞—Å—Å–∫–∞–∂–∏! ‚ú®", reply_markup=cancel_order_kb)
    return OCCASION

async def occasion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["occasion"] = update.message.text
    await update.message.reply_text("–ß—Ç–æ –Ω—É–∂–Ω–æ ‚Äî —à–∞—Ä—ã, –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ?", reply_markup=cancel_order_kb)
    return WHAT_TO_ORDER

async def what_to_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["what"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?", reply_markup=cancel_order_kb)
    return COMMENT

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["comment"] = update.message.text
    address_kb = ReplyKeyboardMarkup([
        ["–°–∞–º–æ–≤—ã–≤–æ–∑", "–î–æ—Å—Ç–∞–≤–∫–∞"],
        ["üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"]
    ], resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ '–°–∞–º–æ–≤—ã–≤–æ–∑':", reply_markup=address_kb)
    return ADDRESS

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    now = datetime.now().strftime("%d.%m.%Y %H:%M")

    orders_sheet.append_row([
        str(update.effective_user.id),
        context.user_data["order_date"],
        context.user_data["occasion"],
        context.user_data["what"],
        context.user_data["comment"],
        context.user_data["address"],
        now
    ])

    await context.bot.send_message(MANAGER_ID,
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑:\n"
        f"–î–∞—Ç–∞: {context.user_data['order_date']}\n"
        f"–ü–æ–≤–æ–¥: {context.user_data['occasion']}\n"
        f"–ß—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å: {context.user_data['what']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data['comment']}\n"
        f"–ê–¥—Ä–µ—Å: {context.user_data['address']}"
    )

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", reply_markup=main_menu)
    return ConversationHandler.END

    await update.message.reply_text("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ '–°–∞–º–æ–≤—ã–≤–æ–∑':", reply_markup=address_kb)
    return ADDRESS

    orders_sheet.append_row([
        str(update.effective_user.id),
        context.user_data.get("name", ""),
        context.user_data.get("phone", ""),
        context.user_data["order_date"],
        context.user_data["occasion"],
        context.user_data["what"],
        context.user_data["comment"],
        context.user_data["address"],
        now
    ])

    await context.bot.send_message(MANAGER_ID,
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑:\n–î–∞—Ç–∞: {context.user_data['order_date']}\n–ü–æ–≤–æ–¥: {context.user_data['occasion']}\n"
        f"–ß—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å: {context.user_data['what']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {context.user_data['comment']}\n–ê–¥—Ä–µ—Å: {context.user_data['address']}"
    )

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.", reply_markup=main_menu)
    return ConversationHandler.END

# === –û–°–¢–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ===
async def profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    all_users = sheet.get_all_records()
    all_history = history_sheet.get_all_records()
    for row in all_users:
        if str(row["ID"]) == user_id:
            info = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {row['–ò–º—è']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {row['–¢–µ–ª–µ—Ñ–æ–Ω']}\n–ü–æ–ª: {row['–ü–æ–ª']}\n–ë–æ–Ω—É—Å—ã: {row['–ë–∞–ª–ª—ã']}"
            history_lines = [
                f"{h['–î–∞—Ç–∞']}: {h['–¢–∏–ø (+/-)']} {h['–°—É–º–º–∞']} ‚Äî {h['–ü—Ä–∏—á–∏–Ω–∞']}"
                for h in all_history if str(h["ID"]) == user_id
            ]
            history_text = "\n\nüïò –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n" + "\n".join(history_lines) if history_lines else "\n\n–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
            await update.message.reply_text(info + history_text)
            return
    await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")

async def balance_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    all_records = sheet.get_all_records()
    for row in all_records:
        if str(row["ID"]) == user_id:
            await update.message.reply_text(
                f"üéà –£ —Ç–µ–±—è {row['–ë–∞–ª–ª—ã']} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!\n\n"
                "üìå –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:\n‚Ä¢ –û—Ç 3000‚ÇΩ ‚Äî 5%\n‚Ä¢ –û—Ç 5000‚ÇΩ ‚Äî 7%\n‚Ä¢ –û—Ç 10000‚ÇΩ ‚Äî 10%\n"
                "‚Ä¢ –ó–∞ –æ—Ç–∑—ã–≤ ‚Äî 500 –±–∞–ª–ª–æ–≤\n‚Ä¢ –ó–∞ –¥—Ä—É–≥–∞ ‚Äî 500 –±–∞–ª–ª–æ–≤\n\n"
                "üìå –ö–∞–∫ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å:\n‚Ä¢ –î–æ 15% –æ—Ç –∑–∞–∫–∞–∑–∞\n‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—Ç 1 –≥–æ–¥\n‚Ä¢ –ù–µ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è —Å –∞–∫—Ü–∏—è–º–∏"
            )
            return
    await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start")

async def review_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚≠êÔ∏è –û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö:\n"
        "https://yandex.ru/maps/org/sharsalyut/71692700211\n\n"
        "–ö–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏—à—å ‚Äî –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞!\n\n"
        "üìå –ó–∞ –æ—Ç–∑—ã–≤ ‚Äî 500 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤."
    )

async def invite_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(
        f"üëØ –û—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É —ç—Ç—É —Å—Å—ã–ª–∫—É: https://t.me/sharsalut_bot?start={user_id}\n\n"
        f"–ï—Å–ª–∏ –æ–Ω –∑–∞–∫–∞–∂–µ—Ç ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å 500 –±–∞–ª–ª–æ–≤, –∞ –æ–Ω ‚Äî 5 —à–∞—Ä–∏–∫–æ–≤ üéÅ"
    )
     
# === –ê–î–ú–ò–ù–ö–ê: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ, —Å–ø–∏—Å–∞–Ω–∏–µ, —Ä–∞—Å—Å—ã–ª–∫–∏ ===
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

ADMIN_MENU, CHOOSE_PHONE, ENTER_AMOUNT, ENTER_REASON, BROADCAST_CHOOSE, BROADCAST_TEXT = range(100, 106)

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMINS:
        return

    keyboard = ReplyKeyboardMarkup([
    ["‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", "‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã"],
    ["üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±—ç–∫"]
], resize_keyboard=True)

    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)
    return ADMIN_MENU

async def choose_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["action"] = update.message.text
    await update.message.reply_text("üì± –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return CHOOSE_PHONE

async def enter_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:")
    return ENTER_AMOUNT

async def enter_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["amount"] = int(update.message.text)
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–ø–∏—Å–∞–Ω–∏—è:")
    return ENTER_REASON
async def apply_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text
    phone = context.user_data["phone"]
    amount = context.user_data["amount"]
    sign = "+" if context.user_data["action"] == "‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã" else "-"
    actual_amount = amount if sign == "+" else -amount
    now = datetime.now().strftime("%d.%m.%Y %H:%M")

    def normalize(phone):
        phone = str(phone).strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
        if phone.startswith("+7"):
            phone = "8" + phone[2:]
        elif phone.startswith("7"):
            phone = "8" + phone[1:]
        return phone

    normalized_input = normalize(phone)
    all_rows = sheet.get_all_records()

    for idx, row in enumerate(all_rows, start=2):  # —Å—Ç—Ä–æ–∫–∞ 1 ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
        row_phone = normalize(row.get("–¢–µ–ª–µ—Ñ–æ–Ω", ""))
        if row_phone == normalized_input:
            new_balance = int(row["–ë–∞–ª–ª—ã"]) + actual_amount
            sheet.update_cell(idx, 6, new_balance)  # –∫–æ–ª–æ–Ω–∫–∞ F ‚Äî –ë–∞–ª–ª—ã
            history_sheet.append_row([row["ID"], now, sign, amount, reason])

            try:
                user_id = int(row["ID"])
                if 9 <= datetime.now().hour < 21:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"{'‚ûï' if sign == '+' else '‚ûñ'} {amount} –±–∞–ª–ª–æ–≤\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                    )
            except:
                pass

            await update.message.reply_text(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: *{row['–ò–º—è']}*\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{new_balance} –±–∞–ª–ª–æ–≤*",
                parse_mode="Markdown"
            )
            return ConversationHandler.END

async def cashback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì± –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    return CASHBACK_PHONE

async def cashback_phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["cashback_phone"] = update.message.text.strip()
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    return CASHBACK_AMOUNT

async def apply_cashback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = context.user_data.get("cashback_phone")
        percent = context.user_data.get("cashback_percent")
        amount_spent = int(update.message.text)
        cashback_amount = int(amount_spent * percent / 100)
        now = datetime.now().strftime("%d.%m.%Y %H:%M")

        all_rows = sheet.get_all_records()
        for idx, row in enumerate(all_rows, start=2):
            if normalize(row["–¢–µ–ª–µ—Ñ–æ–Ω"]) == normalize(phone):
                new_balance = int(row["–ë–∞–ª–ª—ã"]) + cashback_amount
                sheet.update_cell(idx, 6, new_balance)
                history_sheet.append_row([row["ID"], now, "+", cashback_amount, f"–ö—ç—à–±—ç–∫ {percent}% —Å {amount_spent}‚ÇΩ"])

                try:
                    user_id = int(row["ID"])
                    if 9 <= datetime.now().hour < 21:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"üí∏ –ù–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±—ç–∫: +{cashback_amount} –±–∞–ª–ª–æ–≤\n{percent}% –æ—Ç —Å—É–º–º—ã {amount_spent}‚ÇΩ"
                        )
                except:
                    pass

                await update.message.reply_text(
                    f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {cashback_amount} –±–∞–ª–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç—É {row['–ò–º—è']} (–∫—ç—à–±—ç–∫ {percent}% –æ—Ç {amount_spent}‚ÇΩ)"
                )
                return ConversationHandler.END

        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—ç—à–±—ç–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

def normalize_phone(phone):
    phone = str(phone).strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone.startswith("+7"):
        phone = "8" + phone[2:]
    elif phone.startswith("7"):
        phone = "8" + phone[1:]
    return phone

async def cashback_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = normalize_phone(context.user_data["cashback_phone"])
        order_sum = int(update.message.text.strip())
        cashback = 0

        if order_sum >= 10000:
            cashback = int(order_sum * 0.10)
            percent = 10
        elif order_sum >= 5000:
            cashback = int(order_sum * 0.07)
            percent = 7
        elif order_sum >= 3000:
            cashback = int(order_sum * 0.05)
            percent = 5
        else:
            await update.message.reply_text("‚ö†Ô∏è –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –º–µ–Ω—å—à–µ 3000 —Ä—É–±. –ö—ç—à–±—ç–∫ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è.")
            return ConversationHandler.END

        users = sheet.get_all_records()
        for i, row in enumerate(users):
            if normalize_phone(row["–¢–µ–ª–µ—Ñ–æ–Ω"]) == phone:
                sheet.update_cell(i + 2, 6, row["–ë–∞–ª–ª—ã"] + cashback)  # –ö–æ–ª–æ–Ω–∫–∞ F ‚Äî –ë–∞–ª–ª—ã
                history_sheet.append_row([
                row["ID"],
                datetime.now().strftime("%d.%m.%Y %H:%M"),
                "+",
                cashback,
                f"–ö—ç—à–±—ç–∫ {percent}% —Å {order_sum}‚ÇΩ"
                ])
                await context.bot.send_message(
                    chat_id=row["ID"],
                    text=f"üéâ –ù–∞—á–∏—Å–ª–µ–Ω –∫—ç—à–±—ç–∫ {cashback} –±–∞–ª–ª–æ–≤ ({percent}% –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ {order_sum} —Ä—É–±.)"
                )
                await update.message.reply_text("‚úÖ –ö—ç—à–±—ç–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω.")
                return ConversationHandler.END

        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return ConversationHandler.END

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—ç—à–±—ç–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END




# === –†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ===
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üì¨ –í—Å–µ–º", callback_data="broadcast_all"),
            InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω–∞–º", callback_data="broadcast_men"),
        ],
        [
            InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω–∞–º", callback_data="broadcast_women"),
            InlineKeyboardButton("üíé >2000 –±–∞–ª–ª–æ–≤", callback_data="broadcast_gt2000"),
        ],
        [
            InlineKeyboardButton("üîª <500 –±–∞–ª–ª–æ–≤", callback_data="broadcast_lt500"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç –±–∞–ª–ª–æ–≤", callback_data="broadcast_0"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì¢ –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=reply_markup)
    return BROADCAST_CHOOSE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîô –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return ConversationHandler.END

async def broadcast_choose_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["broadcast_filter"] = query.data
    await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    return BROADCAST_TEXT

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("===> –í–æ—à–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é broadcast_send")

    text = update.message.text
    filter_key = context.user_data["broadcast_filter"]
    print(f"===> –í—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä: {filter_key}")
    print(f"===> –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {text}")

    users = sheet.get_all_records()
    print(f"===> –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(users)}")

    count = 0

    filters_map = {
        "broadcast_all": lambda row: True,
        "broadcast_men": lambda row: row["–ü–æ–ª"] == "–ú—É–∂—Å–∫–æ–π",
        "broadcast_women": lambda row: row["–ü–æ–ª"] == "–ñ–µ–Ω—Å–∫–∏–π",
        "broadcast_gt2000": lambda row: int(row["–ë–∞–ª–ª—ã"]) > 2000,
        "broadcast_lt500": lambda row: int(row["–ë–∞–ª–ª—ã"]) < 500,
        "broadcast_0": lambda row: int(row["–ë–∞–ª–ª—ã"]) == 0,
    }

    target_filter = filters_map.get(filter_key, lambda row: False)

    for row in users:
        if target_filter(row):
            try:
                print(f"===> –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {row['ID']}")
                await context.bot.send_message(chat_id=row["ID"], text=text)
                count += 1
            except Exception as e:
                print(f"===> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {row['ID']}: {e}")
                continue

    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    print(f"===> –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    return ConversationHandler.END

 

# === –•–ï–ù–î–õ–ï–†–´ ===
app = ApplicationBuilder().token("7802089142:AAFA3DCk2aWx5C-8Hd_bSMzfeJYpGA_G2O8").build()

reg_conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)],
        GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender_handler)],
    },
    fallbacks=[]
)

order_conv = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üì© –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É$"), order_start)],
    states={
        ORDER_DATE: [
            MessageHandler(filters.Regex("^üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É$"), cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, order_date)
        ],
        OCCASION: [
            MessageHandler(filters.Regex("^üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É$"), cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, occasion)
        ],
        WHAT_TO_ORDER: [
            MessageHandler(filters.Regex("^üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É$"), cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, what_to_order)
        ],
        COMMENT: [
            MessageHandler(filters.Regex("^üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É$"), cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, comment)
        ],
        ADDRESS: [
            MessageHandler(filters.Regex("^üîô –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É$"), cancel),
            MessageHandler(filters.TEXT & ~filters.COMMAND, address)
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(reg_conv)
app.add_handler(order_conv)
app.add_handler(MessageHandler(filters.Regex("^üéà –ú–æ–∏ –±–∞–ª–ª—ã$"), balance_handler))
app.add_handler(MessageHandler(filters.Regex("^üß© –ü—Ä–æ—Ñ–∏–ª—å$"), profile_handler))
app.add_handler(MessageHandler(filters.Regex("^üëØ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞$"), invite_handler))
app.add_handler(MessageHandler(filters.Regex("^‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$"), review_handler))

CASHBACK_PHONE, CASHBACK_AMOUNT = range(200, 202)  # –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ

admin_conv = ConversationHandler(
    entry_points=[
        CommandHandler("admin", admin_start),
        MessageHandler(filters.Regex("^‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã$"), choose_phone),
        MessageHandler(filters.Regex("^‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã$"), choose_phone),
        MessageHandler(filters.Regex("^üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$"), broadcast_start),
        MessageHandler(filters.Regex("^üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±—ç–∫$"), cashback_handler),
    ],
    states={
        CHOOSE_PHONE: [
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É$"), admin_start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_amount),
        ],
        ENTER_AMOUNT: [
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É$"), admin_start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, enter_reason),
        ],
        ENTER_REASON: [
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É$"), admin_start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, apply_bonus),
        ],
        CASHBACK_PHONE: [
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É$"), admin_start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, cashback_phone_handler),
        ],
        CASHBACK_AMOUNT: [
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É$"), admin_start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, cashback_amount_handler),
        ],
        BROADCAST_CHOOSE: [
            CallbackQueryHandler(broadcast_choose_target, pattern="^broadcast_")
        ],
        BROADCAST_TEXT: [
            MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É$"), admin_start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_send),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)



from telegram.ext import CallbackQueryHandler  # –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç


app.add_handler(CommandHandler("start", start))

app.add_handler(admin_conv)

app.add_handler(MessageHandler(filters.Regex("^üéÅ –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã$"), bonuses_handler))

app.run_polling()
